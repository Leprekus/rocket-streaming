import { Server } from 'socket.io'
import express, { Request, Response } from 'express'
import { createServer } from 'http'
import cors from 'cors'
/**
 * signalling server:
 * hosting Peer = P_h
 * joining peer = P_j
 *
 * i) P_h sends request (with room id) to server
 * ii) server creates room (with provided id)
 * iii) any P_j must provide the id generated by P_h
 * iv) server joins P_j to room created by P_h
 */

const PORT = 3001
const origin = 'http://localhost:3000'
const app = express()
const server = createServer(app)
const io = new Server(server, {
	cors: {
		origin: origin,
		methods: ['GET', 'POST']
	}
})

app.use(cors({ origin }))

io.on('connection', (socket) => {
	const roomId = socket.handshake.query.roomId
	console.log(`client connected ${socket.id}`)
	
	if(typeof roomId != 'string' || !roomId)
		throw Error('No room Id provided')

	socket.join(roomId)

	socket.on('stream', (data) => {
		const blob = new Blob(data, { type: 'video/webm' });
		io.to(roomId).emit('stream', blob)
	})

	socket.on('disconnect', () => {
		console.log(`client disconnected ${socket.id}`)
	})

})

server.listen(PORT, () => {
	console.log(`Server listening on PORT ${PORT}`)
})
