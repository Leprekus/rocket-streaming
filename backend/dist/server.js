"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const socket_io_1 = require("socket.io");
const express_1 = __importDefault(require("express"));
const http_1 = require("http");
const cors_1 = __importDefault(require("cors"));
require('dotenv').config();
/**
 * signalling server:
 * hosting Peer = P_h
 * joining peer = P_j
 *
 * i) P_h sends request (with room id) to server
 * ii) server creates room (with provided id)
 * iii) any P_j must provide the id generated by P_h
 * iv) server joins P_j to room created by P_h
 */
const PORT = process.env.PORT;
const origin = 'http://localhost:3000';
const app = (0, express_1.default)();
const server = (0, http_1.createServer)(app);
const io = new socket_io_1.Server(server, {
    cors: {
        origin: origin,
        methods: ['GET', 'POST']
    }
});
app.use((0, cors_1.default)({ origin }));
io.on('connection', (socket) => {
    const roomId = socket.handshake.query.roomId;
    console.log(`client connected ${socket.id}`);
    if (typeof roomId != 'string' || !roomId)
        throw Error('No room Id provided');
    socket.join(roomId);
    socket.on('message', (data) => {
        //const blob = new Blob(payload.data, { type: 'video/webm' });
        console.log('emitting ', data);
        //console.log('Emitting to room ', roomId)
        io.to(roomId).emit('stream', data);
    });
    socket.on('disconnect', () => {
        console.log(`client disconnected ${socket.id}`);
    });
});
server.listen(PORT, () => {
    console.log(`Server listening on PORT ${PORT}`);
});
